To Do:
+ Implement machine learning algos to work in real-time 
	[Model is integrated with the GUI but the model itself is quite bad]
	[Will probably drop this xgboost model entirely and use RNN instead]
	+ Create a rough prototype (xgboost) model
	+ Save the model in a way that can be loaded in quickly
	+ Make real-time predictions
	+ Incorporate the strategy into the GUI
	- Try to improve the xgboost model
		[Model currently gets stuck in easily predictable/beatable loops; ultimately any useful model will need to be able to incorporate real-time information or else it is a predictable pattern-machine]
		- Increase # of features that the model looks at to reduce predictability
	- Allow model to accept inputs with length < # of variables (i.e., add an NaN fill to the inputs)
	
- Train additional models to play with (e.g., LSTMs)
	+ Process data for an RNN
	+ Develop working prototype for a model
	+ Improve the model (Try different architectures)
		[Good enough for now; may try to improve later. But achieving validation/test accuracy close to 39%]
	- Implement a way to make real-time predictions that maximize Expected Value (i.e., maximize wins AND minimize losses)
		[Should this be deterministic or probabilistic?]
	- Incorporate strategy into the GUI
	- Implement a way to make real-time adjustments to weights when facing a particular opponent
		[Save the results permanently or not? Could be messed up by someone spamming options]
		[How to weight the other user's moves? VS. 133,000 other inputs their moves will barely affect the weights. Will have to find a way to gradually switch to a model based 100% on the user's moves]


- Change the output of the game results from text to image-based (appears to be easier with OOP)
	+ Add images in response to player 1 input
	+ Add images in response to player 2 input
	+ Keep a history of past 10 turns in the form of images
		+ Find a way to add multiple image objects cleanly
		+ Find a way to move multiple image objects together cleanly
	+ Every time a new turn is played, move up all other images
	- Add a scroll bar to the canvas so that the history can be seen?
	+ Change the colour of the image so that it is obvious who won
	- Grey-out past moves

	
+ Re-organize GUI to fit within a smaller screen or find a way to re-adjust widget/window sizes without cutting off widgets
	+ Re-organized GUI grid, which helps it fit within a smaller screen.
	- Still have not: Found a way to re-adjust widget/window sizes without cutting off widgets




Done:
+ Start a game / reset a game
+ To allow button and keyboard input
+ Keep track of score / history
+ maybe: selection of opponent strategy
+ Add unit tests
+ Change GUI to object-oriented